

- 산술연산자 : +, -, *, /, %(나머지), <<, >>
- 비교연산자 : >, <, >=(>+=), <=(<+=), ==(=두개),!=(!+=)
- 논리연산자 : &&, , !
- 대입연산자 : =, ++, --
- 기타연산자 : (type), ? :, instance of

[ 연산자의 우선 순위 : 산술 > 비교 > 논리 > 대입 ]
- 연산자 여러개가 함께 있는 연산을 계산할 때는 우선순위가 있습니다.
- 위 우선순위 에따라서 최종적인 응답값이 결정됩니다.
- 단, 괄호로 감싸주면 괄호안의 연산이 최우선 순위로 계산된다.

{연산 전에 두 피연산자의 타입이 다른 경우 타입을 일치시킵니다.}
- 두 피연산자의 타입을 같게 일치시킨다. (둘중에 저장공간 크기가 더 큰 타입으로 일치)
    - 피연산자의 타입이 'int' 보다 작은 'short' 타입이면 'int' 로 변환
    - 피연산자의 타입이 'long' 보다 작은 'int', 'short' 타입이면 'long' 으로 변환
    - 피연산자의 타입이 'float' 보다 작은 'long', 'int', 'short' 타입이면 'float' 으로 변환
    - 피연산자의 타입이 'double' 보다 작은 'float', 'long', 'int', 'short' 타입이면 'double' 으로 변환
    - 이처럼, 변수 여러개를 연산했을때 결과값은 피연산자 중 표현범위가 가장 큰 변수 타입을 가지게 됩니다.

{비트 연산}
    - byte 를 8등분한 것이 bit
    - bit 는 0,1 둘중의 하나의 값만을 저장하는 컴퓨터가 저장&표현 가능한 가장 작은 단위
    - 컴퓨터의 가장 작은 단위인 bit이기 때문에 연산중에 bit 연산이 제일 빠름
    - 물론 이전에 배운대로 0,1 값으로 산술연산을 하거나, 바교연산을 할 수 있지만 비트연산을 통해 자리수를 옮길수도 있음
    - 이처럼 bit의 자리수 옮기는 것을 비트 연산이라고 한다.
    - '<<'(왼쪽으로 자리수 옮기기), '>>'(오른쪽으로 자리수 옮기기)
    = 0,1 은 2진수 값이기 때문에,
        - 자리수를 왼쪽으로 옮기는 횟수만큼 2의 배수로 곱셈이 연산되는 것과 동일합니다 <--이해안감
        - 자리수를 오른쪽으로 옮기는 횟수만큼 2의 배수로 나눗셈이 연산되는것과 동일합니다.

{배열}
    - 배열은 new 명령어를 통해서 생성하며 대괄호 안에 그 크기를 지정한다.